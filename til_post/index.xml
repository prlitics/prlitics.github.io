<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Til_posts | Peter Licari</title>
    <link>/til_post/</link>
      <atom:link href="/til_post/index.xml" rel="self" type="application/rss+xml" />
    <description>Til_posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Thu, 18 Feb 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu7822abfb2f54ce27e2589169adb56259_3245_512x512_fill_lanczos_center_2.png</url>
      <title>Til_posts</title>
      <link>/til_post/</link>
    </image>
    
    <item>
      <title>TIL: Using &#34;tk&#34; as a placeholder when writing</title>
      <link>/til_post/til-using-tk-as-a-placeholder-when-writing/</link>
      <pubDate>Thu, 18 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/til_post/til-using-tk-as-a-placeholder-when-writing/</guid>
      <description>
&lt;script src=&#34;/til_post/til-using-tk-as-a-placeholder-when-writing/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;tldr-use-tk-in-your-writing-drafts-to-signal-your-future-self-that-something-needs-to-be-replaced.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;TL;DR: Use “tk” in your writing drafts to signal your future self that something needs to be replaced.&lt;/h3&gt;
&lt;p&gt;Like many others, my first drafts for writing projects are a chaotic nightmare that I wouldn’t force even my enemies to read. Interwoven among common grammatical goofs (does anyone &lt;em&gt;really&lt;/em&gt; know how to use a semicolon) and things that are entirely my own issues to sort out (does anyone &lt;em&gt;really&lt;/em&gt; know how to spell bureaucracy?) are also a flurry of bracketed reminders for my future self. Stuff like: &lt;strong&gt;[citation here]&lt;/strong&gt;, &lt;strong&gt;[author name]&lt;/strong&gt;, &lt;strong&gt;[p value]&lt;/strong&gt;, and **[ins However, even after all my re-reads and drafts (including a few read slowly and out loud), a handful will slip invariably slip through and make me feel like a dumb-dumb; even &lt;code&gt;ctrl-F&lt;/code&gt;ing the right or left bracket (“[”) doesn’t help me flush them all out. I know I’m not alone with this either—but I still feel like the dumbest dummy to ever plug away at a keyboard whenever I spy one that’s snuck its way into the “final” draft.&lt;/p&gt;
&lt;p&gt;Here’s a trick that I picked up in Tim Ferriss’ &lt;em&gt;&lt;a href=&#34;https://www.amazon.com/dp/B01HSMRWNU/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1&#34;&gt;Tools of Titans&lt;/a&gt;&lt;/em&gt;: Use “tk” as an indicator for your future self and other proof readers that something needs to be replaced. While English can often dissolve into consonant soup (especially by the third re-read), some consonant couplings are less common than others. “t” and “k” happens to be one of the least likely, making it far less likely to ping a false positive when you &lt;code&gt;ctrl+F&lt;/code&gt; it. Also, if you’re working in a word processor (or even in one of many Latex programs and the latest RStudio!), you’ll probably have an instant spell-check feature that’ll put a helpful little squiggle underneath it, which will help draw your attention to it.&lt;/p&gt;
&lt;p&gt;Personally, I’ve tweaked the habit to provide a little additional information. Instead of writing just “tk”, I’ll write “tk-cite” or “tk-figure” or “tk-name.” That way, it’s easier for me to remember what exactly I’m supposed to be putting in later. I haven’t been doing this forever but I &lt;strong&gt;&lt;em&gt;have&lt;/em&gt;&lt;/strong&gt; noticed substantially fewer substitution slip-ups in the brief time that I’ve been doing this in earnest. Hope it helps you too!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Grouping On Variables with Spaces in the Column Name Using dplyr</title>
      <link>/til_post/grouping-on-variables-with-spaces-in-the-column-name-using-dplyr/</link>
      <pubDate>Tue, 18 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/til_post/grouping-on-variables-with-spaces-in-the-column-name-using-dplyr/</guid>
      <description>
&lt;script src=&#34;/til_post/grouping-on-variables-with-spaces-in-the-column-name-using-dplyr/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I recently had a variable with a thousand observations that could be one of four classes. I wanted to figure out how many of each class was listed within a variable. Easy enough with &lt;code&gt;group_by()&lt;/code&gt; in normal circumstances. Unfortunately, the purveyors of this dataset decided to name their columns with two words. So something like &lt;code&gt;tasty fruit&lt;/code&gt; rather than &lt;code&gt;tasty-fruit&lt;/code&gt; or &lt;code&gt;tasty_fruit&lt;/code&gt;. Unfortunately, just passing the multi-word name through &lt;code&gt;group_by()&lt;/code&gt; as you normally would a standard column name won’t work &lt;a href=&#34;#link3&#34;&gt;for reasons I detail below&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TLDR: There are two solutions. Click here for &lt;a href=&#34;#link1&#34;&gt;solution 1&lt;/a&gt; and here for &lt;a href=&#34;#link2&#34;&gt;solution 2.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now, there are a lot of different conventions for naming columns in a dataset: &lt;code&gt;camelCase&lt;/code&gt;, &lt;code&gt;TitleCase&lt;/code&gt;, &lt;code&gt;snake_case&lt;/code&gt;, &lt;code&gt;mEmEcAsE&lt;/code&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;—but one thing that is pretty universally avoided among data analytics professionals (aside from using the same name &lt;strong&gt;twice&lt;/strong&gt;), it’s using multiple words for one column name. The reasons are part historical, part technological—but many languages (R included) don’t play nice with column names containing spaces. But, it’s still an issue that can crop-up from time-to-time, so I thought I would share my solution to it.&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;Note: I’m generally understanding if the source isn’t an analyst or is someone who, like, only works with smaller excel files and (some) SQL variants. But I’m convinced that there’s only one way to deal with the “pros” who do this: Ritual sacrifice to the coding gods.&lt;/em&gt;)&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;images/Puu_Oo_cropped.jpg&#34; /&gt;
&lt;strong&gt;&lt;em&gt;The only logical path.&lt;/em&gt;&lt;/strong&gt;
&lt;/center&gt;
&lt;div id=&#34;heres-how-you-group-by-variables-with-spaces-in-them-using-dplyr.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Here’s how you group by variables with spaces in them using &lt;code&gt;dplyr&lt;/code&gt;.&lt;/h3&gt;
&lt;p&gt;I’m going to be using the &lt;code&gt;penguins&lt;/code&gt; dataset to demonstrate.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(palmerpenguins) #For Data
library(magrittr) #For pipes
library(dplyr) #For data manipulation

head(penguins)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 8
##   species island bill_length_mm bill_depth_mm flipper_length_~ body_mass_g sex  
##   &amp;lt;fct&amp;gt;   &amp;lt;fct&amp;gt;           &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;int&amp;gt;       &amp;lt;int&amp;gt; &amp;lt;fct&amp;gt;
## 1 Adelie  Torge~           39.1          18.7              181        3750 male 
## 2 Adelie  Torge~           39.5          17.4              186        3800 fema~
## 3 Adelie  Torge~           40.3          18                195        3250 fema~
## 4 Adelie  Torge~           NA            NA                 NA          NA &amp;lt;NA&amp;gt; 
## 5 Adelie  Torge~           36.7          19.3              193        3450 fema~
## 6 Adelie  Torge~           39.3          20.6              190        3650 male 
## # ... with 1 more variable: year &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s say I want to know how many different kinds of penguins there are. Normally that can be accomplished like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguin_count &amp;lt;- penguins %&amp;gt;%
  group_by(species) %&amp;gt;%
  summarise(n_birds = n())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` ungrouping output (override with `.groups` argument)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguin_count&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   species   n_birds
##   &amp;lt;fct&amp;gt;       &amp;lt;int&amp;gt;
## 1 Adelie        152
## 2 Chinstrap      68
## 3 Gentoo        124&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;we-have-152-adelie-penguins-68-chinstrap-penguins-and-124-gentoo-penguins.&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;We have 152 Adelie penguins, 68 Chinstrap penguins, and 124 Gentoo penguins.&lt;/h4&gt;
&lt;p&gt;But what if the column wasn’t titled “species” but something like “ground birbs.” (I’m a millenial; don’t judge me.)&lt;/p&gt;
&lt;p&gt;Unfortunately for my demonstration (although fortunately for its many users!), it doesn’t have any columns with spaces. It instead uses &lt;code&gt;snake_case&lt;/code&gt;. So I have to do a bit of renaming.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pengs &amp;lt;- penguins %&amp;gt;%
  rename(&amp;quot;ground birbs&amp;quot; = species)

head(pengs)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 8
##   `ground birbs` island bill_length_mm bill_depth_mm flipper_length_~
##   &amp;lt;fct&amp;gt;          &amp;lt;fct&amp;gt;           &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;int&amp;gt;
## 1 Adelie         Torge~           39.1          18.7              181
## 2 Adelie         Torge~           39.5          17.4              186
## 3 Adelie         Torge~           40.3          18                195
## 4 Adelie         Torge~           NA            NA                 NA
## 5 Adelie         Torge~           36.7          19.3              193
## 6 Adelie         Torge~           39.3          20.6              190
## # ... with 3 more variables: body_mass_g &amp;lt;int&amp;gt;, sex &amp;lt;fct&amp;gt;, year &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;link3&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Demonstrating the Problem&lt;/h2&gt;
&lt;p&gt;To demonstrate the issue, let’s see what happens if you try to &lt;code&gt;group_by()&lt;/code&gt; the renamed “species” column in the &lt;code&gt;penguins&lt;/code&gt; dataset, &lt;code&gt;ground birbs&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pengs_count &amp;lt;- pengs %&amp;gt;%
  group_by(&amp;quot;ground birbs&amp;quot;) %&amp;gt;%
  summarise(n_birds = n())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` ungrouping output (override with `.groups` argument)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(pengs_count)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##   `&amp;quot;ground birbs&amp;quot;` n_birds
##   &amp;lt;chr&amp;gt;              &amp;lt;int&amp;gt;
## 1 ground birbs         344&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, cool, we know that there are 344 ground birbs? Not very helpful.&lt;/p&gt;
&lt;p&gt;Maybe we could use the column index?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pengs_count &amp;lt;- pengs %&amp;gt;%
  group_by(1) %&amp;gt;%
  summarise(n_birds = n())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` ungrouping output (override with `.groups` argument)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(pengs_count)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##     `1` n_birds
##   &amp;lt;dbl&amp;gt;   &amp;lt;int&amp;gt;
## 1     1     344&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Yes, they are number 1 in cuteness—but that’s somehow even less informative.&lt;/strong&gt; Could we avoid the quotes?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pengs_count &amp;lt;- pengs %&amp;gt;%
  group_by(ground birbs) %&amp;gt;%
  summarise(n_birds = n())

head(pengs_count)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error: &amp;lt;text&amp;gt;:2:19: unexpected symbol
## 1: pengs_count &amp;lt;- pengs %&amp;gt;%
## 2:   group_by(ground birbs
##                      ^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s even worse! We just get an error!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;there-are-two-ways-that-we-can-access-this-misbegotten-column.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;There are two ways that we can access this misbegotten column.&lt;/h2&gt;
&lt;div id=&#34;link1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Solution 1: Use ` (backquotes)&lt;/h3&gt;
&lt;p&gt;If you encase the the offending name in backquotes (&lt;code&gt;`&lt;/code&gt;) you’ll be able to access it normally. So instead of &lt;code&gt;&#34;ground birbs&#34;&lt;/code&gt; it’d be &lt;code&gt;`ground birbs`&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pengs_count &amp;lt;- pengs %&amp;gt;%
  group_by(`ground birbs`) %&amp;gt;%
  summarise(n_birds = n())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` ungrouping output (override with `.groups` argument)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(pengs_count)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   `ground birbs` n_birds
##   &amp;lt;fct&amp;gt;            &amp;lt;int&amp;gt;
## 1 Adelie             152
## 2 Chinstrap           68
## 3 Gentoo             124&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;link2&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Solution 2: Use the &lt;code&gt;across()&lt;/code&gt; function&lt;/h3&gt;
&lt;p&gt;New in &lt;code&gt;dplyr 1.0.0&lt;/code&gt; is the &lt;a href=&#34;https://dplyr.tidyverse.org/reference/across.html&#34;&gt;&lt;code&gt;across()&lt;/code&gt;&lt;/a&gt; function, which allows you to apply functions &lt;em&gt;across&lt;/em&gt; (get it) rows in your data. But, importantly in our case, &lt;code&gt;across()&lt;/code&gt; lets you access variables by their column index.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pengs_count &amp;lt;- pengs %&amp;gt;%
  group_by(across(1)) %&amp;gt;%
  summarise(n_birds = n())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` ungrouping output (override with `.groups` argument)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(pengs_count)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   `ground birbs` n_birds
##   &amp;lt;fct&amp;gt;            &amp;lt;int&amp;gt;
## 1 Adelie             152
## 2 Chinstrap           68
## 3 Gentoo             124&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;so-if-you-want-to-group_by-a-column-with-a-space-in-its-name-use-backquotes-or-across-i-hope-this-helps&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;So if you want to &lt;code&gt;group_by()&lt;/code&gt; a column with a space in its name, use backquotes or &lt;code&gt;across()&lt;/code&gt;! I hope this helps!!&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;I’m only kidding with this one. But even this is preferable to spaces in the column name!&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How to Remove URLS from Zotero Bibtex</title>
      <link>/til_post/how-to-remove-urls-from-zotero-bibtex/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/til_post/how-to-remove-urls-from-zotero-bibtex/</guid>
      <description>
&lt;script src=&#34;/til_post/how-to-remove-urls-from-zotero-bibtex/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I’m currently in the process of transitioning my dissertation from LibreOffice into &lt;em&gt;LaTeX&lt;/em&gt; because &lt;del&gt;I like pain&lt;/del&gt; it’s a lot easier to finagle all of the images and tables while making sure that I’m keeping in-line with the grad school’s style formatting requirements. I’m currently using &lt;a href=&#34;https://www.zotero.org/&#34;&gt;Zotero&lt;/a&gt; to manage all of my citations. I went to just do a cursory check on how my bibliography rendered and here’s what I found:&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;images/1.PNG&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;Yikes! URLS for the webpages for journal articles! While I’m personally pretty ambivalent towards it, that’s not something that style-guideline sticklers are gonna abide. I’d like for it to only export the URL from web sources—blogs, news articles, videos and the like—while nixing the export for others.&lt;/p&gt;
&lt;p&gt;Surprisingly, there isn’t an option in the Zotero App for this functionality. I came across this awesome post &lt;a href=&#34;https://vxlabs.com/2012/06/29/removing-urls-from-zotero-bibtex-exports/&#34;&gt;from vxlabs&lt;/a&gt; that provided the code and approach that inspired this post. Their suggestion:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Go to Preferences | Advanced and click on the “Show Data Directory” button.&lt;/li&gt;
&lt;li&gt;Edit translators/BibTeX.js with your favourite text editor.&lt;/li&gt;
&lt;li&gt;In function doExport(), at around line 2040 in Zotero 3.0.7, change the “for (var field in fieldMap)” loop by adding a single line of code like this:&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;then provided the following code:&lt;/p&gt;
&lt;pre class=&#34;js&#34;&gt;&lt;code&gt;for(var field in fieldMap) {
    # only add the following line:
    if (field == &amp;quot;url&amp;quot;) continue;
    if(item[fieldMap[field]]) {
        writeField(field, item[fieldMap[field]]);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&#34;text/javascript&#34;&gt;
for(var field in fieldMap) {
    # only add the following line:
    if (field == &#34;url&#34;) continue;
    if(item[fieldMap[field]]) {
        writeField(field, item[fieldMap[field]]);
    }
}
&lt;/script&gt;
&lt;p&gt;This fix makes a lot of sense! The code is just saying “hey Zotero. Just go ahead and &lt;code&gt;continue&lt;/code&gt; past the &lt;strong&gt;url&lt;/strong&gt; field when writing Bibtex entries.” It was almost perfect for my needs sans one small tick—it &lt;em&gt;also&lt;/em&gt; nixed the urls off of webpages!&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;images/2.PNG&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;So in order to make it perfect (that is: in order to make it so that it skips the URLs for everything but the entries coming from webpages), you just got to add this amended text.&lt;/p&gt;
&lt;pre class=&#34;js&#34;&gt;&lt;code&gt;        for (var field in fieldMap) {
            if (field == &amp;quot;url&amp;quot; &amp;amp; item.itemType != &amp;quot;webpage&amp;quot;) continue;
            if (item[fieldMap[field]]) {
                writeField(field, item[fieldMap[field]]);
            }&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&#34;text/javascript&#34;&gt;
        for (var field in fieldMap) {
            if (field == &#34;url&#34; &amp; item.itemType != &#34;webpage&#34;) continue;
            if (item[fieldMap[field]]) {
                writeField(field, item[fieldMap[field]]);
            }
&lt;/script&gt;
&lt;p&gt;The extra bit just tells the exporter “hey! &lt;code&gt;continue&lt;/code&gt; on along past the URL field &lt;strong&gt;only&lt;/strong&gt; when the item type &lt;em&gt;isn’t&lt;/em&gt; a webpage.” Let’s see how it works!&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;images/3.PNG&#34; /&gt;
&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;images/4.PNG&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
